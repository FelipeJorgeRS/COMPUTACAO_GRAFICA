from OpenGL.GL import *
from OpenGL.GL.shaders import compileProgram, compileShader
import glfw
import numpy as np

def main():
    # Define the vertex shader
    vertex_shader = """
        #version 330 core
        layout (location = 0) in vec2 a_position;
        void main() {
            gl_Position = vec4(a_position, 0.0, 1.0);
        }
    """

    # Define the fragment shader
    fragment_shader = """
        #version 330 core
        out vec4 FragColor;
        void main() {
            FragColor = vec4(1.0, 1.0, 1.0, 1.0);
        }
    """

    # Initialize GLFW
    if not glfw.init():
        return

    # Create a window
    window = glfw.create_window(800, 600, "circulo parametrico 1", None, None)
    if not window:
        glfw.terminate()
        return
    glfw.make_context_current(window)

    # Define a equação parametrica do circulo
    def circle(u):
        x = np.cos(u)
        y = np.sin(u)
        return x, y

    
    # Compile the shaders
    shader_program = compileProgram(
        compileShader(vertex_shader, GL_VERTEX_SHADER),
        compileShader(fragment_shader, GL_FRAGMENT_SHADER)
    )

    # vertex buffer
    vertices = []
    for i in range(100):
        u = 2 * np.pi * i / 100
        x, y = circle(u)
        vertices.append(x)
        vertices.append(y)
    vertices = np.array(vertices, dtype=np.float32)

    vbo = glGenBuffers(1)
    glBindBuffer(GL_ARRAY_BUFFER, vbo)
    glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)

    # vertex array object
    vao = glGenVertexArrays(1)
    glBindVertexArray(vao)
    glBindBuffer(GL_ARRAY_BUFFER, vbo)
    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(0)

    # Main loop
    while not glfw.window_should_close(window):
        glfw.poll_events()

        glClear(GL_COLOR_BUFFER_BIT)
        glUseProgram(shader_program)
        glBindVertexArray(vao)
        glDrawArrays(GL_LINE_LOOP, 0, 100)

        glfw.swap_buffers(window)

    
    glDeleteVertexArrays(1, [vao])
    glDeleteBuffers(1, [vbo])
    glfw.terminate()

if __name__ == '__main__':
    main()
